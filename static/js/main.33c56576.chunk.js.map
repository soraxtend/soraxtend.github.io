{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["props","_filterUniversity","row","state","selectedUniversityId","parseInt","university_id","_filterFaculty","selectedFacultyId","faculty_id","_filterField","selectedFieldId","field_id","_filterProgram","selectedProgramId","program_id","_filterProgramType","selectedProgramTypeId","program_type_id","loading","data","this","setState","fetch","response","json","filteredRows","console","log","filter","universities","uniqBy","map","universityTypeId","university_type_id","universityTypeNameTh","university_type_name_th","universityId","universityNameTh","university_name_th","universityNameEn","university_name_en","faculties","facultyId","facultyNameTh","faculty_name_th","facultyNameEn","faculty_name_en","fields","fieldId","fieldNameTh","field_name_th","fieldNameEn","field_name_en","programs","programId","programRunningNumber","program_running_number","programNameTh","program_name_th","programNameEn","program_name_en","programTypeId","programTypeNameTh","program_type_name_th","programTypes","className","value","onChange","e","target","key","length","index","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.33c56576.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport { uniqBy } from 'lodash'\n\nexport default class extends Component {\n  constructor (props) {\n    super(props)\n    this.state = {\n      loading: false,\n      data: []\n    }\n  }\n\n  async componentDidMount () {\n    try {\n      this.setState({ loading: true })\n      const response = await fetch('https://raw.githubusercontent.com/soraxtend/soraxtend.github.io/master/courses-all.json') // eslint-disable-line\n      const data = await response.json()\n      this.setState({\n        loading: false,\n        data,\n        filteredRows: data\n      })\n    } catch (error) {\n      console.log('Error while trying to fetch data', error)\n      this.setState({ loading: false })\n    }\n  }\n\n  _filterUniversity = (row) =>\n    (!this.state.selectedUniversityId || (parseInt(row.university_id, 10) === parseInt(this.state.selectedUniversityId, 10)))\n  _filterFaculty = (row) =>\n    (!this.state.selectedFacultyId || (parseInt(row.faculty_id, 10) === parseInt(this.state.selectedFacultyId, 10)))\n  _filterField = (row) =>\n    (!this.state.selectedFieldId || (parseInt(row.field_id, 10) === parseInt(this.state.selectedFieldId, 10)))\n  _filterProgram = (row) =>\n    (!this.state.selectedProgramId || (parseInt(row.program_id, 10) === parseInt(this.state.selectedProgramId, 10)))\n  _filterProgramType = (row) =>\n    (!this.state.selectedProgramTypeId || (parseInt(row.program_type_id, 10) === parseInt(this.state.selectedProgramTypeId, 10)))\n  render () {\n    const filteredRows = this.state.data\n      .filter(this._filterUniversity)\n      .filter(this._filterFaculty)\n      .filter(this._filterField)\n      .filter(this._filterProgram)\n      .filter(this._filterProgramType)\n\n    const universities = uniqBy(\n      (this.state.selectedUniversityId ? this.state.data : filteredRows).map(\n        (row) => ({\n          universityTypeId: row.university_type_id,\n          universityTypeNameTh: row.university_type_name_th,\n          universityId: row.university_id,\n          universityNameTh: row.university_name_th,\n          universityNameEn: row.university_name_en\n        })\n      ), 'universityId')\n\n    const faculties = uniqBy(\n      (this.state.selectedFacultyId\n        ? this.state.data.filter(this._filterUniversity)\n        : filteredRows)\n        .map((row) => ({\n          facultyId: row.faculty_id,\n          facultyNameTh: row.faculty_name_th,\n          facultyNameEn: row.faculty_name_en\n        })), 'facultyId')\n\n    const fields = uniqBy(\n      (this.state.selectedFieldId\n        ? this.state.data\n          .filter(this._filterUniversity)\n          .filter(this._filterFaculty)\n        : filteredRows\n      ).map((row) => ({\n        fieldId: row.field_id,\n        fieldNameTh: row.field_name_th,\n        fieldNameEn: row.field_name_en\n      })\n      ), 'fieldId')\n\n    const programs = uniqBy(\n      (this.state.selectedFieldId\n        ? this.state.data\n          .filter(this._filterUniversity)\n          .filter(this._filterFaculty)\n          .filter(this._filterField)\n        : filteredRows\n      ).map((row) => ({\n        programId: row.program_id,\n        programRunningNumber: row.program_running_number,\n        programNameTh: row.program_name_th,\n        programNameEn: row.program_name_en,\n        programTypeId: row.program_type_id,\n        programTypeNameTh: row.program_type_name_th\n      })\n      ), 'programId')\n\n    const programTypes = uniqBy(\n      (this.state.selectedFieldId\n        ? this.state.data\n          .filter(this._filterUniversity)\n          .filter(this._filterFaculty)\n          .filter(this._filterField)\n          .filter(this._filterProgram)\n        : filteredRows\n      ).map((row) => ({\n        programTypeId: row.program_type_id,\n        programTypeNameTh: row.program_type_name_th\n      })\n      ), 'programTypeId')\n\n    return (\n      <div className='App'>\n        <div>\n          <label>1. สถาบัน</label>\n          <select value={this.state.selectedUniversityId}\n            onChange={e => this.setState({ selectedUniversityId: e.target.value })}>\n            <option value=''>แสดงทั้งหมด</option>\n            {(universities || []).map(({ universityId, universityNameTh }) =>\n              <option key={universityId} value={universityId}>{universityId}: {universityNameTh}</option>\n            )}\n          </select>\n        </div>\n        <div>\n          <label>2. คณะ</label>\n          <select value={this.state.selectedFacultyId}\n            onChange={e => this.setState({ selectedFacultyId: e.target.value })}>\n            <option value=''>แสดงทั้งหมด</option>\n            {(faculties || []).map(({ facultyId, facultyNameTh }) =>\n              <option key={facultyId} value={facultyId}>{facultyId}: {facultyNameTh}</option>\n            )}\n          </select>\n        </div>\n        <div>\n          <label>3. สาขา</label>\n          <select value={this.state.selectedFieldId}\n            onChange={e => this.setState({ selectedFieldId: e.target.value })}>\n            <option value=''>แสดงทั้งหมด</option>\n            {(fields || []).map(({ fieldId, fieldNameTh }) =>\n              <option key={fieldId} value={fieldId}>{fieldId}: {fieldNameTh}</option>\n            )}\n          </select>\n        </div>\n        <div>\n          <label>4. หลักสูตร</label>\n          <select\n            value={this.state.selectedProgramId}\n            onChange={e => this.setState({ selectedProgramId: e.target.value })}>\n            <option value=''>แสดงทั้งหมด</option>\n            {(programs || []).map(({ programId, programNameTh }) =>\n              <option key={programId} value={programId}>{programId}: {programNameTh}</option>\n            )}\n          </select>\n        </div>\n        <div>\n          <label>5. ประเภทหลักสูตร</label>\n          <select value={this.state.selectedProgramTypeId}\n            onChange={e => this.setState({ selectedProgramTypeId: e.target.value })}>\n            <option value=''>แสดงทั้งหมด</option>\n            {(programTypes || []).map(({ programTypeId, programTypeNameTh }) =>\n              <option key={programTypeId} value={programTypeId}>{programTypeId}: {programTypeNameTh}</option>\n            )}\n          </select>\n        </div>\n        <div>\n          <h1>Search Result ({(filteredRows || []).length})</h1>\n          {(this.state.data.length !== filteredRows.length) && (\n            <div>\n              {filteredRows.map((row, index) =>\n                <div key={index}>{index + 1}. {row.university_name_th} - {row.faculty_name_th} - {row.field_name_th} - {row.program_name_th} - {row.program_type_name_th}</div>\n              )}\n            </div>\n          )}\n        </div>\n      </div>\n    )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}